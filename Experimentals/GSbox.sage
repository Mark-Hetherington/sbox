kr=[
[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,0],
[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1],
[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1],
[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1],
[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0],
[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0],
[0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0],
[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,1],
[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0],
[0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,1,1,1,1,0,1,0,0,1,1,1,0,1,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,1,1,1,0,0,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,1,1,0,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,1]
]

def gen_e_AI(self, **kwargs):
	P = BooleanPolynomialRing(self._n+self._m, ["x%d"%i for i in range(self._n)] + ["y%d"%i for i in range(self._m)])
	gens = P.gens()

	degree=2
	#nrows = self._length
	nrows = 39
	ncols = sum(binomial(self._m+self._n,i) for i in range(0,degree+1))

	exponents = []
	for d in xrange(degree+1):
		exponents += IntegerVectors(d, max_length=self._n+self._m, min_length=self._n+self._m, min_part=0, max_part=1).list()

	col = 0
	variables = []
	for exponent in exponents:
		variables.append( mul([gens[i]**exponent[i] for i in range(len(exponent))]))

	variables=vector(variables)
	Y=[P("y%d"%i) for i in range(self._m)]

	while(1):
		A=random_matrix(GF(2),nrows,ncols)
		#A=Matrix(GF(2),kr)
		B=A.right_kernel().matrix()
		
		if(B.is_zero()):
			continue

		system=[sum(A[i]*variables) for i in xrange(A.nrows())]
	
		I=P.ideal(system)
		I=I.groebner_basis()
		
		#print "I={0}".format(I)
		
		if(I != [1]):
			break

	self._S=range(self._length)

	for i in xrange(1<<self._n):
		t=ZZ(i).digits(base=2,padto=self._m)
		t.reverse()
		s=I[:]
		y=dict([[Y[g],t[g]] for g in xrange(self._m)])
		s=[s[g].subs(y) for g in xrange(len(I))]
 		t=[g.constant_coefficient() for g in s]
 		t.reverse()
 		self._S[ZZ(t,2)]=i

def gen_e_claude_matrix(self, **kwargs):
	def get_q_APN():
		return self._P("x^3")

	def is_basis(mas=None):
		base=Combinations(mas).list()
		base=[sum(i) for i in base]
		fld=[i for i in self._K]

		base.sort()
		fld.sort()

		return fld==base

	basis=[self._K.multiplicative_generator()^i for i in xrange(self._n)]
	
	#print "is_basis = {0}".format(is_basis(basis))

	f_APN=get_q_APN()

	M = matrix(self._K,self._n)

	for i in xrange(self._n):
		for j in xrange(self._m):
			M[i,j] = f_APN.subs(0) + f_APN.subs(basis[i]) + f_APN.subs(basis[j]) + f_APN.subs(basis[i]+basis[j])

	L = random_matrix(GF(2),self._n)

	while(1):
		stop = 0
		A = L.transpose()*M + M*L
		for i in xrange(1,self._length):
			t = ZZ(i).digits(2,padto=self._n)
			T = sum([ A[g]*t[g]  for g in xrange(self._n)])
			T = [ g._vector_() for g in T ]
			T = matrix(GF(2),T)
			if T.rank() != self._n - 1:
				stop = 1
				L = random_matrix(GF(2),self._n)
				break

		if stop == 0:
			break
	
	print "L:\n{0}".format(L)

	# converting matrix to polynomial
	sbox=range(self._length)

	for i in xrange(self._length):
		sbox[i]=(L*vector(GF(2),ZZ(i).digits(base=2,padto=self._n))).list()
		sbox[i]=ZZ(sbox[i],2)
		
	self._S = sbox
	self._polynomial = None
	
	pL = self.interpolation_polynomial()
	
	print "pL = {0}".format(pL)

	self._S=None
	self._polynomial = None

	self._polynomial = f_APN.subs(0) + f_APN.subs(self._P('x')) + f_APN.subs(pL) + f_APN.subs(self._P('x')+pL)

def gen_e_lilia(self, **kwargs):
	r'''
		Test value:
			L(a^0)=a^33
			L(a^1)=a^51
			L(a^2)=a^34
			L(a^3)=a^23
			L(a^4)=a^28
			L(a^5)=a^61
	'''
	def ret_power(mas=None):	    
		ret=range(len(mas))
		fld=[i for i in self._K]

		for i in xrange(len(mas)):
			if mas[i] != 0 and mas[i] != 1:
				ret[i]="a^%s"%fld.index(mas[i])
			elif mas[i] == 0:
				ret[i]='0'
			else:
				ret[i]='a^0'

		return ret

	def upd_fld(fld=None,i=None,L=None):
		#fld[i+1]=fld[i][:]
		#print "start upd_fld"
		fld[i+1]=[g for g in self._K]
		fld[i+1].remove(0)
		for g in L:
			fld[i+1].remove(g)
		#print "end upd_fld"

# start debug	
	#print "tL={0}".format(ret_power([self._alpha^33,self._alpha^51,self._alpha^34,self._alpha^23,self._alpha^28,self._alpha^61]))
# end debug	

	nxt=0
	regenerate=0
	basis=[self._alpha^i for i in xrange(self._n)]

	fld=range(self._n)
	fld[0]=[i for i in self._K]
	fld[0].remove(0)
	L=[]

	while 1:
		u=self._K.random_element()
		if u.trace() == 1:
			break
# start debug
	#print "u={0}".format(ret_power([u]))
# end debug

	i=0
	while 1:
		print "~"*10
		for g in xrange(len(L)):
			if isinstance(fld[g],list):
				print "fld[{0}]={1}".format(g,len(fld[g]))
		sys.stdout.flush()
		regenerate=0

		while 1:
			#print "start: pop"
			#print "~"*10
			#print "i={0}".format(i)
			#print "fld[{0}]={1} ({2})".format(i,ret_power(fld[i]),len(fld[i]))
			#print "L={0}".format(ret_power(L))

			if len(fld[i]) == 0:
				regenerate = 1
				if len(L) !=0:
					L.pop()
				break

			if regenerate == 0:
				L.append(fld[i].pop(randint(0,len(fld[i])-1)))
			else:
				regenerate=0
				L.pop()
				L.append(fld[i].pop(randint(0,len(fld[i])-1)))
				
			#print "end  : pop"

			#print "len(L)={0} len(X)={1}".format(len(L),len(basis[0:i+1]))

			LL=L[:]
			LL=Combinations(LL).list()

			LL=[sum(LL[g]) for g in xrange(1,len(LL))]

			#print "basis={0}".format(ret_power(basis))
			#print "L={0} ({1})".format(ret_power(L),len(L))
			#print "LL={0}".format(ret_power(LL))

			X=basis[0:i+1]
			X=Combinations(X).list()

			X=[sum(X[g]) for g in xrange(1,len(X))]

			#print "X={0}".format(ret_power(basis[0:i+1]))
			#print "XX={0}".format(ret_power(X))

			for j in xrange(len(X)):
				a=X.pop(j)
				l=LL.pop(j)

				for k in xrange(len(X)):
					#print "start: i={0} j={1} k={2} len(X)={3} len(LL)={4}".format(i,j,k,len(X),len(LL))
					x=X[k]

					if (((x^2*l+x*(l)^2)/a^3).trace() == 0):
						ksi=0
						for h in xrange(1,self._n):
							ksi+=((x^2*l+x*(l)^2)/a^3)^(2^h)*sum([u^(2^g) for g in xrange(h)])

						if (LL[k] == ksi) or (LL[k] == (a+ksi)):
							regenerate=1
							break

					#print "end  : i={0} j={1} k={2}".format(i,j,k)

				if regenerate == 1:
					break

				X.insert(j,a)
				LL.insert(j,l)

			if regenerate == 0:
				break

		if (len(basis) == (i+1)) and (regenerate == 0):
			break

		if (regenerate == 0):
			upd_fld(fld,i,L)
			i+=1
		else:
			while 1:
				if len(fld[i]) == 0:
					if len(L) !=0:
						L.pop()
					i-=1
				else:
					break
			
			upd_fld(fld,i,L)
			#else:
			#	print ">>> Error: regenerate == 1 and len(fld[{0}]) == 0".format(i)

		if (len(fld[0]) == 0):
			print ">>> Error:  len(fld[0])=0"
			break

		if len(L) == (self._n+1):
			print ">>> Error: len(L)={0}".format(self._n+1)
			break

	print ""
	LL=L[:]
	LL=Combinations(LL).list()
	LL=[sum(LL[g]) for g in xrange(len(LL))]

	X=basis[:]
	X=Combinations(X).list()

	X=[sum(X[g]) for g in xrange(len(X))]

	#print "LL={0}".format(LL)
	#print "X={0}".format(X)
	
	l = []
	for i in xrange(self._length):
		l.append((X[i],LL[i]))

	L=self._P.lagrange_polynomial(l)

	#print "pol={0}".format("x^2*({0})+x*({0})^2".format(L))

	return self._P("x^2*({0})+x*({0})^2".format(L))

def gen_e_lilia_base(self, **kwargs):
	r'''
		Test value:
			L(a^0)=a^33
			L(a^1)=a^51
			L(a^2)=a^34
			L(a^3)=a^23
			L(a^4)=a^28
			L(a^5)=a^61
	'''
	def ret_power(mas=None):	    
		ret=range(len(mas))
		fld=[i for i in self._K]

		for i in xrange(len(mas)):
			if mas[i] != 0 and mas[i] != 1:
				ret[i]="a^%s"%fld.index(mas[i])
			elif mas[i] == 0:
				ret[i]='0'
			else:
				ret[i]='a^0'

		return ret
	
	def is_basis(mas=None):
		base=Combinations(mas).list()
		base=[sum(i) for i in base]
		fld=[i for i in self._K]

		base.sort()
		fld.sort()

		return fld==base

	i=0
	basis=[self._alpha^i for i in xrange(self._n)]

	U=[]	
	for u in self._K:
		if u.trace() == 1:
			U.append(u)

	X=basis[:]
	X=Combinations(X).list()

	X=[sum(X[g]) for g in xrange(1,len(X))]

	while 1:
		# should be basis generation function
		M=random_matrix(GF(2),self._n,self._n)
		while(M.is_singular()):
			M=random_matrix(GF(2),self._n,self._n)

		L=vector(basis)
		L=M*L
		L=L.list()
		
		#print "L={0} ({1})".format(ret_power(L),is_basis(L))
		print "L={0}".format(ret_power(L))
		#sys.stderr.write("L={0}\n".format(ret_power(L)))

		L=Permutations(L).list()
		
		i=0
		while 1:
			if i == len(L):
				break
			
			LL_original=L[i][:]
			LL_original=Combinations(LL_original).list()

			LL_original=[sum(LL_original[g]) for g in xrange(1,len(LL_original))]

			for u in U:
				regenerate=0
				LL=LL_original[:]
				for j in xrange(len(X)):
					a=X.pop(j)
					l=LL.pop(j)

					for k in xrange(len(X)):
						#print "start: i={0} j={1} k={2} len(X)={3} len(LL)={4}".format(i,j,k,len(X),len(LL))
						x=X[k]

						if (((x^2*l+x*(l)^2)/a^3).trace() == 0):
							ksi=0
							for h in xrange(1,self._n):
								ksi+=((x^2*l+x*(l)^2)/a^3)^(2^h)*sum([u^(2^g) for g in xrange(h)])

							if (LL[k] == ksi) or (LL[k] == (a+ksi)):
								regenerate=1
								break

						#print "end  : i={0} j={1} k={2}".format(i,j,k)

					if regenerate == 1:
						X.insert(j,a)
						break

					X.insert(j,a)
					LL.insert(j,l)

				if regenerate == 0:
					break
				
			if regenerate == 0:
				break
			else:
				i+=1

		if regenerate == 0:
			break

	print ""
	LL=L[i][:]
	LL=Combinations(LL).list()
	LL=[sum(LL[g]) for g in xrange(len(LL))]

	X=basis[:]
	X=Combinations(X).list()

	X=[sum(X[g]) for g in xrange(len(X))]

	#print "LL={0}".format(LL)
	#print "X={0}".format(X)
	
	l = []
	for i in xrange(self._length):
		l.append((X[i],LL[i]))

	L=self._P.lagrange_polynomial(l)

	#print "pol={0}".format("x^2*({0})+x*({0})^2".format(L))
	self._polynomial = self._P("x^2*({0})+x*({0})^2".format(L))

